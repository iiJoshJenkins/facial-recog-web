{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","start","document","body","style","backgroundColor","params","window","location","search","split","sortedParams","gender","age","forEach","param","_param","test","substr","length","buttonClass","react_default","a","createElement","className","Component","Boolean","hostname","match","ReactDOM","render","App_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAEqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAO,GAHQR,wEAOjBS,SAASC,KAAKC,MAAMC,gBAAkB,OACtC,IAAMC,EAASC,OAAOC,SAASC,OAAOC,MAAM,KACtCC,EAAe,CACnBC,OAAQ,KACRC,IAAK,MAEPP,EAAOQ,QAAQ,SAAAC,GACb,IAAIC,EAASD,EACT,QAAQE,KAAKD,KACfA,EAASA,EAAOE,OAAO,IAGP,OADlBF,EAASA,EAAON,MAAM,MACX,KACL,MAAMO,KAAKD,EAAO,MACpBA,EAAO,GAAKA,EAAO,GAAGE,OAAO,EAAGF,EAAO,GAAGG,OAAS,IAEnC,SAAdH,EAAO,IAA+B,WAAdA,EAAO,GACjCL,EAAaC,OAASI,EAAO,GAE7BL,EAAaE,IAAMG,EAAO,MAIhC,IAAMI,EAAc,aAAoBT,EAAaC,OACrD,OACES,EAAAC,EAAAC,cAAA,YACI3B,KAAKI,MAAMC,OACXoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,SAAf,oBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAWJ,GAAnB,iCAxCmBK,cCUbC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCbNC,IAASC,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,MAAS7B,SAAS8B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.804e1e4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: false\r\n    };\r\n  }\r\n  render() {\r\n    document.body.style.backgroundColor = \"#fff\";\r\n    const params = window.location.search.split(\"&\");\r\n    const sortedParams = {\r\n      gender: null,\r\n      age: null\r\n    };\r\n    params.forEach(param => {\r\n      let _param = param;\r\n      if (/^[?]/g.test(_param)) {\r\n        _param = _param.substr(1);\r\n      }\r\n      _param = _param.split(\"=\");\r\n      if (_param[1] === \"1\") {\r\n        if (/s$/g.test(_param[0])) {\r\n          _param[0] = _param[0].substr(0, _param[0].length - 1);\r\n        }\r\n        if (_param[0] === \"male\" || _param[0] === \"female\") {\r\n          sortedParams.gender = _param[0];\r\n        } else {\r\n          sortedParams.age = _param[0];\r\n        }\r\n      }\r\n    });\r\n    const buttonClass = `clickHere` + \" \" + sortedParams.gender;\r\n    return (\r\n      <div>\r\n        {!this.state.start && (\r\n          <div>\r\n            <div className={\"container\"}>\r\n              <h1 className={\"title\"}>Hello Gorgeous!</h1>\r\n            </div>\r\n            <div className={\"container\"}>\r\n              <button className={buttonClass}>CLICK HERE TO BEGIN</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}